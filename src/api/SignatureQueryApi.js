/**
 * openapi for sibyl2 server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ServiceFunctionContextChain from '../model/ServiceFunctionContextChain';
import Sibyl2FunctionContextSlim from '../model/Sibyl2FunctionContextSlim';
import Sibyl2FunctionWithPath from '../model/Sibyl2FunctionWithPath';

/**
* SignatureQuery service.
* @module api/SignatureQueryApi
* @version 1.0
*/
export default class SignatureQueryApi {

    /**
    * Constructs a new SignatureQueryApi. 
    * @alias module:api/SignatureQueryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1SignatureFuncGet operation.
     * @callback module:api/SignatureQueryApi~apiV1SignatureFuncGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sibyl2FunctionWithPath} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * func query
     * @param {String} repo repo
     * @param {String} rev rev
     * @param {String} signature signature
     * @param {module:api/SignatureQueryApi~apiV1SignatureFuncGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sibyl2FunctionWithPath}
     */
    apiV1SignatureFuncGet(repo, rev, signature, callback) {
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling apiV1SignatureFuncGet");
      }
      // verify the required parameter 'rev' is set
      if (rev === undefined || rev === null) {
        throw new Error("Missing the required parameter 'rev' when calling apiV1SignatureFuncGet");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling apiV1SignatureFuncGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'rev': rev,
        'signature': signature
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sibyl2FunctionWithPath;
      return this.apiClient.callApi(
        '/api/v1/signature/func', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SignatureFuncctxChainGet operation.
     * @callback module:api/SignatureQueryApi~apiV1SignatureFuncctxChainGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceFunctionContextChain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * funcctx chain query
     * @param {String} repo repo
     * @param {String} rev rev
     * @param {String} signature signature
     * @param {Number} depth depth
     * @param {module:api/SignatureQueryApi~apiV1SignatureFuncctxChainGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceFunctionContextChain}
     */
    apiV1SignatureFuncctxChainGet(repo, rev, signature, depth, callback) {
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling apiV1SignatureFuncctxChainGet");
      }
      // verify the required parameter 'rev' is set
      if (rev === undefined || rev === null) {
        throw new Error("Missing the required parameter 'rev' when calling apiV1SignatureFuncctxChainGet");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling apiV1SignatureFuncctxChainGet");
      }
      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling apiV1SignatureFuncctxChainGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'rev': rev,
        'signature': signature,
        'depth': depth
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceFunctionContextChain;
      return this.apiClient.callApi(
        '/api/v1/signature/funcctx/chain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SignatureFuncctxGet operation.
     * @callback module:api/SignatureQueryApi~apiV1SignatureFuncctxGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sibyl2FunctionContextSlim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * funcctx query
     * @param {String} repo repo
     * @param {String} rev rev
     * @param {String} signature signature
     * @param {module:api/SignatureQueryApi~apiV1SignatureFuncctxGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sibyl2FunctionContextSlim}
     */
    apiV1SignatureFuncctxGet(repo, rev, signature, callback) {
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling apiV1SignatureFuncctxGet");
      }
      // verify the required parameter 'rev' is set
      if (rev === undefined || rev === null) {
        throw new Error("Missing the required parameter 'rev' when calling apiV1SignatureFuncctxGet");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling apiV1SignatureFuncctxGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'rev': rev,
        'signature': signature
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sibyl2FunctionContextSlim;
      return this.apiClient.callApi(
        '/api/v1/signature/funcctx', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SignatureFuncctxRchainGet operation.
     * @callback module:api/SignatureQueryApi~apiV1SignatureFuncctxRchainGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceFunctionContextChain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * funcctx reverse chain query
     * @param {String} repo repo
     * @param {String} rev rev
     * @param {String} signature signature
     * @param {Number} depth depth
     * @param {module:api/SignatureQueryApi~apiV1SignatureFuncctxRchainGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceFunctionContextChain}
     */
    apiV1SignatureFuncctxRchainGet(repo, rev, signature, depth, callback) {
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling apiV1SignatureFuncctxRchainGet");
      }
      // verify the required parameter 'rev' is set
      if (rev === undefined || rev === null) {
        throw new Error("Missing the required parameter 'rev' when calling apiV1SignatureFuncctxRchainGet");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling apiV1SignatureFuncctxRchainGet");
      }
      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling apiV1SignatureFuncctxRchainGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'rev': rev,
        'signature': signature,
        'depth': depth
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceFunctionContextChain;
      return this.apiClient.callApi(
        '/api/v1/signature/funcctx/rchain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SignatureRegexFuncGet operation.
     * @callback module:api/SignatureQueryApi~apiV1SignatureRegexFuncGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * func query
     * @param {String} repo repo
     * @param {String} rev rev
     * @param {String} regex regex
     * @param {module:api/SignatureQueryApi~apiV1SignatureRegexFuncGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiV1SignatureRegexFuncGet(repo, rev, regex, callback) {
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling apiV1SignatureRegexFuncGet");
      }
      // verify the required parameter 'rev' is set
      if (rev === undefined || rev === null) {
        throw new Error("Missing the required parameter 'rev' when calling apiV1SignatureRegexFuncGet");
      }
      // verify the required parameter 'regex' is set
      if (regex === undefined || regex === null) {
        throw new Error("Missing the required parameter 'regex' when calling apiV1SignatureRegexFuncGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'rev': rev,
        'regex': regex
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/signature/regex/func', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
