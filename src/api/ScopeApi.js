/**
 * openapi for sibyl2 server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Scope service.
* @module api/ScopeApi
* @version 1.0
*/
export default class ScopeApi {

    /**
    * Constructs a new ScopeApi. 
    * @alias module:api/ScopeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1FileGet operation.
     * @callback module:api/ScopeApi~apiV1FileGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * file query by repo and rev
     * @param {String} repo repo
     * @param {String} rev rev
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeRegex includeRegex
     * @param {module:api/ScopeApi~apiV1FileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiV1FileGet(repo, rev, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling apiV1FileGet");
      }
      // verify the required parameter 'rev' is set
      if (rev === undefined || rev === null) {
        throw new Error("Missing the required parameter 'rev' when calling apiV1FileGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'rev': rev,
        'includeRegex': opts['includeRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1RepoDelete operation.
     * @callback module:api/ScopeApi~apiV1RepoDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * repo delete
     * @param {String} repo rev delete by repo
     * @param {module:api/ScopeApi~apiV1RepoDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1RepoDelete(repo, callback) {
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling apiV1RepoDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/repo', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1RepoGet operation.
     * @callback module:api/ScopeApi~apiV1RepoGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * query all the repos
     * @param {module:api/ScopeApi~apiV1RepoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiV1RepoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/repo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1RevDelete operation.
     * @callback module:api/ScopeApi~apiV1RevDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * rev delete
     * @param {String} repo repo
     * @param {String} rev rev
     * @param {module:api/ScopeApi~apiV1RevDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1RevDelete(repo, rev, callback) {
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling apiV1RevDelete");
      }
      // verify the required parameter 'rev' is set
      if (rev === undefined || rev === null) {
        throw new Error("Missing the required parameter 'rev' when calling apiV1RevDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'rev': rev
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/rev', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1RevGet operation.
     * @callback module:api/ScopeApi~apiV1RevGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * rev query by repo name
     * @param {String} repo rev search by repo
     * @param {module:api/ScopeApi~apiV1RevGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiV1RevGet(repo, callback) {
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling apiV1RevGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/rev', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
