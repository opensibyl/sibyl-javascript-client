/**
 * openapi for sibyl2 server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ObjectFunctionContextSlimWithSignature from '../model/ObjectFunctionContextSlimWithSignature';
import ObjectFunctionWithSignature from '../model/ObjectFunctionWithSignature';
import Sibyl2ClazzWithPath from '../model/Sibyl2ClazzWithPath';

/**
* BasicQuery service.
* @module api/BasicQueryApi
* @version 1.0
*/
export default class BasicQueryApi {

    /**
    * Constructs a new BasicQueryApi. 
    * @alias module:api/BasicQueryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1ClazzGet operation.
     * @callback module:api/BasicQueryApi~apiV1ClazzGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Sibyl2ClazzWithPath>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * class query
     * @param {String} repo repo
     * @param {String} rev rev
     * @param {String} file file
     * @param {module:api/BasicQueryApi~apiV1ClazzGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Sibyl2ClazzWithPath>}
     */
    apiV1ClazzGet(repo, rev, file, callback) {
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling apiV1ClazzGet");
      }
      // verify the required parameter 'rev' is set
      if (rev === undefined || rev === null) {
        throw new Error("Missing the required parameter 'rev' when calling apiV1ClazzGet");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling apiV1ClazzGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'rev': rev,
        'file': file
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Sibyl2ClazzWithPath];
      return this.apiClient.callApi(
        '/api/v1/clazz', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FuncGet operation.
     * @callback module:api/BasicQueryApi~apiV1FuncGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ObjectFunctionWithSignature>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * func query
     * @param {String} repo repo
     * @param {String} rev rev
     * @param {String} file file
     * @param {Object} opts Optional parameters
     * @param {String} opts.lines specific lines
     * @param {module:api/BasicQueryApi~apiV1FuncGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ObjectFunctionWithSignature>}
     */
    apiV1FuncGet(repo, rev, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling apiV1FuncGet");
      }
      // verify the required parameter 'rev' is set
      if (rev === undefined || rev === null) {
        throw new Error("Missing the required parameter 'rev' when calling apiV1FuncGet");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling apiV1FuncGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'rev': rev,
        'file': file,
        'lines': opts['lines']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ObjectFunctionWithSignature];
      return this.apiClient.callApi(
        '/api/v1/func', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FuncctxGet operation.
     * @callback module:api/BasicQueryApi~apiV1FuncctxGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ObjectFunctionContextSlimWithSignature>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * func ctx query
     * @param {String} repo repo
     * @param {String} rev rev
     * @param {String} file file
     * @param {Object} opts Optional parameters
     * @param {String} opts.lines specific lines
     * @param {module:api/BasicQueryApi~apiV1FuncctxGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ObjectFunctionContextSlimWithSignature>}
     */
    apiV1FuncctxGet(repo, rev, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling apiV1FuncctxGet");
      }
      // verify the required parameter 'rev' is set
      if (rev === undefined || rev === null) {
        throw new Error("Missing the required parameter 'rev' when calling apiV1FuncctxGet");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling apiV1FuncctxGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'rev': rev,
        'file': file,
        'lines': opts['lines']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ObjectFunctionContextSlimWithSignature];
      return this.apiClient.callApi(
        '/api/v1/funcctx', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
